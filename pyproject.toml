[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.bandit]
skips = ["B101"]

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
norecursedirs = [
    "*.egg",
    ".git",
    ".*",
    "_*"
]

[tool.coverage.run]
branch = true
omit = ["*/types.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.",
    "raise NotImplementedError"
]

[tool.bumpversion]
current_version = "1.2.0"
commit = true
message = "Release {new_version}"
tag = true
tag_message = "Release {new_version}"

[[tool.bumpversion.files]]
filename = "sedate/__init__.py"
search= "__version__ = '{current_version}'"
replace= "__version__ = '{new_version}'"

[[tool.bumpversion.files]]
filename = "HISTORY.rst"
search = """
---------
"""
replace = """
---------

{new_version} ({now:%d.%m.%Y})
~~~~~~~~~~~~~~~~~~~
"""

[tool.mypy]
python_version = 3.9
follow_imports = "silent"
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_defs = true
mypy_path = "$MYPY_CONFIG_FILE_DIR"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
src = ["src", "tests"]
include = [
    "pyproject.toml",
    "sedate/**/*.py",
    "tests/**/*.py",
    "stubs/**/*.pyi"
]
line-length = 79
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = [
    "B0",
    "B904",
    "B909",
    "C4",
    "COM818",
    "D2",
    "D301",
    "D4",
    "E",
    "F",
    "FLY002",
    "I002",
    "ISC",
    "N",
    "PERF",
    "PGH004",
    "PIE",
    "PYI",
    "Q",
    "RUF",
    "SIM",
    "SLOT",
    "UP",
    "W"
]
ignore = [
    "B007",
    "C420",
    "D200",
    "D201",
    "D202",
    "D204",
    "D205",
    "D209",
    "D210",
    "D211",
    "D400",
    "D401",
    "D412",
    "E226",
    "E402",
    "E711",
    "E712",
    "E741",
    "N818",
    "PYI019",
    "PYI041",
    "RUF012",
    "RUF013",
    "RUF021",
    "RUF022",
    "RUF023",
    "RUF031",
    "RUF052",
    "RUF056",
    "SIM103",
    "SIM105",
    "SIM108",
    "SIM110",
    "SIM118",
    "SIM210",
    "SIM910",
    "UP009",
    "UP012",
    "UP032",
    "UP038",
]
unfixable = []
external = ["TC"]
allowed-confusables = ["Ã—"]
preview = true

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "C4",
    "D",
    "FLY002",
    "I002",
    "ISC",
    "N",
    "Q",
    "PERF",
    "PGH",
    "PIE",
    "PYI",
    "RUF",
    "SIM",
    "UP",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = [
    "afterFlowable",
    "HSTORE",
    "sortKey",
    "URL",
    "UUID"
]
classmethod-decorators = [
    # NOTE: We can potentially get rid some of these with SQLAlchemy 2.0
    #       since they should cleanly combine with classmethod
    "declared_attr",
    "expression",
    "comparator",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.flake8-quotes]
avoid-escape = true
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py39,py310,py311,py312,py313,lint,bandit,mypy

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311,lint,bandit,mypy
    3.12: py312
    3.13: py313

[testenv]
setenv =
    py{39,310,311,312,313}: COVERAGE_FILE = .coverage.{envname}
deps =
    coverage[toml]
    pytest
    pytest-cov
    pytest-codecov[git]
commands = py.test --cov={envsitepackagesdir}/sedate --cov-report= {posargs}

[testenv:lint]
basepython = python3.11
deps =
    flake8
    flake8-type-checking
    ruff
commands =
    ruff check
    flake8 sedate/ tests/

[testenv:mypy]
basepython = python3.11
deps =
    mypy
    types-pytz
commands =
    mypy -p sedate --python-version 3.9
    mypy -p sedate --python-version 3.10
    mypy -p sedate --python-version 3.11
    mypy -p sedate --python-version 3.12
    mypy -p sedate --python-version 3.13

[testenv:bandit]
basepython = python3.11
deps =
    bandit[toml]
commands = bandit -q -c pyproject.toml -r sedate/

[testenv:report]
deps =
    coverage[toml]
skip_install = true
commands =
    coverage combine
    coverage report -m
"""